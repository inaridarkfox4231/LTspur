// ざれごと

// 本格的に自作スライダーを使ってみる。
// HSB240に依存してる箇所があったので修正しました（色は事前に決めてね）
// 横スライダーと縦スライダーの線を描くことにした（備え付け）
// 色変更・・んー要相談。あんま増やしすぎるのもちょっとね。
// 値をキー値からダイレクトに取得できるようにしてください（めんどくさい）→できました。
// 実験：透明度を追加するとか（で、画像を別に用意してみるとか）

// 今背景色でやってるのを特定のオブジェクト、図形の色として、で、まあ・・いいや。

// これとは別に作りたいものがあるのでアイデア書いておく
// 三角形のブレット（以前作った）を使ってFALさんのブレットパターンと組み合わせてなんか作りたい
// カラースライダーを動かして特定のRGB配列にした時だけブレットパターンが変わる（インターバルとか方向決定などなど）
// そうでない時はデフォルト、一定フレームごとに1発ずつ発射する感じ
// たとえば特定の赤、特定の青、特定の緑、あるいはゾロ目のときなど。
// で、弧状スライダーで方向をいじったりできたら面白いよね。つまりホーミングは無し。だいぶ変わっちゃうかな・・
// ていうかあっちはさ、向こうもこっちも同じメソッドだからこそのホーミングでしょ、こっちが撃つなら要らんやん。以上。

// というわけでArcSliderとCircleSliderを作ってね。
// あと、あっちのスライダー、線上をクリックしてもActivateされる仕組みになってる・・
// めんどくさいな。そうだね、hitの仕様やめるか・・代わりにマージン用意して、スライダーベースでactivate判定するとか。うん。
// そうなるとスライダーごとに当たり判定作ったりしないといけないわね。
// 今スライダーのhitからカーソルのhitに移行してるけどここを個別処理にしてマージンがどうのこうのってやれば良さそう。
// 三角形のあれこれとかも必要なくなるしコードが簡潔になるのはいいよね。

// とりあえずキー名をスライダー作るときに登録しちゃおうね。後付けだと増やせない。
// hitをいじります・・たとえば横なら、マージンを設定して・・んー。
// 横スライダーの場合：topMarginとbottomMarginを設定してマウスダウンの位置をそれにより生じるrectの範囲内かどうかで
// 判定して中にあればactivateされる感じ、です。縦：同じく。

// クラス名のイニシャルは大文字がいいよね。
